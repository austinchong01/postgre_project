<%
// Helper object to convert color names to hex codes
const colorMap = {
    'white': '#ffffff',
    'black': '#000000',
    'red': '#ff0000',
    'blue': '#0000ff',
    'green': '#008000',
    'yellow': '#ffff00',
    'pink': '#ffc0cb',
    'purple': '#800080',
    'orange': '#ffa500',
    'gray': '#808080',
    'grey': '#808080',
    'brown': '#a52a2a',
    'navy': '#000080',
    'dark blue': '#00008b',
    'light blue': '#add8e6',
    'beige': '#f5f5dc',
    'khaki': '#f0e68c',
    'olive': '#808000'
};
%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clothing Inventory</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: #f5f5f5;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 10px;
            text-align: center;
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }

        .subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .navigation-bar {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .nav-button {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: white;
            color: #667eea;
            padding: 1rem 2rem;
            text-decoration: none;
            border-radius: 25px;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }

        .nav-button:hover {
            background: #667eea;
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .nav-button.active {
            background: #667eea;
            color: white;
            border-color: #764ba2;
        }

        .nav-icon {
            font-size: 1.2rem;
        }

        .stats {
            display: flex;
            justify-content: space-around;
            background: white;
            padding: 1rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }

        .inventory-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .item-card {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .item-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .item-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .item-name {
            font-size: 1.3rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 0.5rem;
        }

        .item-price {
            font-size: 1.5rem;
            font-weight: bold;
            color: #27ae60;
        }

        .item-details {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .detail-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .detail-label {
            font-weight: bold;
            color: #555;
            min-width: 60px;
        }

        .detail-value {
            color: #777;
        }

        .type-badge {
            display: inline-block;
            background: #667eea;
            color: white;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .size-badge {
            display: inline-block;
            background: #f39c12;
            color: white;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .color-swatch {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid #ddd;
            display: inline-block;
            margin-left: 0.5rem;
        }

        .quick-actions {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #f0f0f0;
            display: flex;
            gap: 0.5rem;
        }

        .quick-btn {
            flex: 1;
            padding: 0.6rem 1rem;
            border: none;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .view-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .view-btn:hover {
            background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);
            transform: scale(1.05);
        }

        .category-btn {
            background: #f8f9ff;
            color: #667eea;
            border: 1px solid #667eea;
        }

        .category-btn:hover {
            background: #667eea;
            color: white;
            transform: scale(1.05);
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .empty-state h2 {
            color: #666;
            margin-bottom: 1rem;
        }

        .empty-state p {
            color: #888;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .stats {
                flex-direction: column;
                gap: 1rem;
            }
            
            .navigation-bar {
                flex-direction: column;
                align-items: center;
            }

            .nav-button {
                width: 200px;
                justify-content: center;
            }
            
            .inventory-grid {
                grid-template-columns: 1fr;
            }

            .quick-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Clothing Inventory</h1>
            <p class="subtitle">Manage your clothing collection</p>
        </header>

        <!-- Navigation Buttons -->
        <div class="navigation-bar">
            <a href="/" class="nav-button active">
                <span class="nav-icon">üè†</span>
                <span>All Items</span>
            </a>
            <a href="/categories" class="nav-button">
                <span class="nav-icon">üìÇ</span>
                <span>Categories</span>
            </a>
        </div>

        <% if (clothing && clothing.length > 0) { %>
            <!-- Statistics Section -->
            <%
            // Calculate statistics
            const totalItems = clothing.length;
            const uniqueTypes = new Set(clothing.map(item => item.type));
            const totalCategories = uniqueTypes.size;
            const totalValue = clothing.reduce((sum, item) => sum + parseFloat(item.price), 0);
            %>
            <div class="stats">
                <div class="stat-item">
                    <div class="stat-number"><%= totalItems %></div>
                    <div class="stat-label">Total Items</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number"><%= totalCategories %></div>
                    <div class="stat-label">Categories</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">$<%= totalValue.toFixed(2) %></div>
                    <div class="stat-label">Total Value</div>
                </div>
            </div>

            <!-- Inventory Grid -->
            <div class="inventory-grid">
                <% clothing.forEach(item => { %>
                    <div class="item-card" onclick="window.location.href='/item/<%= item.id %>'">
                        <div class="item-header">
                            <div>
                                <div class="item-name"><%= item.name %></div>
                                <span class="type-badge"><%= item.type %></span>
                            </div>
                            <div class="item-price">$<%= parseFloat(item.price).toFixed(2) %></div>
                        </div>
                        
                        <div class="item-details">
                            <div class="detail-item">
                                <span class="detail-label">Size:</span>
                                <span class="size-badge"><%= item.size %></span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Color:</span>
                                <span class="detail-value">
                                    <%= item.color %>
                                    <span class="color-swatch" style="background-color: <%= colorMap[item.color.toLowerCase()] || '#cccccc' %>;"></span>
                                </span>
                            </div>
                            <% if (item.created_at) { %>
                            <div class="detail-item" style="grid-column: 1 / -1;">
                                <span class="detail-label">Added:</span>
                                <span class="detail-value"><%= new Date(item.created_at).toLocaleDateString() %></span>
                            </div>
                            <% } %>
                        </div>

                        <!-- Quick Action Buttons -->
                        <div class="quick-actions">
                            <button class="quick-btn view-btn" onclick="event.stopPropagation(); window.location.href='/item/<%= item.id %>'">
                                üëÅÔ∏è View Details
                            </button>
                            <button class="quick-btn category-btn" onclick="event.stopPropagation(); window.location.href='/category/<%= encodeURIComponent(item.type) %>'">
                                üìÇ View <%= item.type %>
                            </button>
                        </div>
                    </div>
                <% }) %>
            </div>
        <% } else { %>
            <!-- Empty State -->
            <div class="empty-state">
                <h2>No Items Found</h2>
                <p>Your inventory is empty. Add some clothing items to get started!</p>
            </div>
        <% } %>
    </div>

    <script>
        // Add some interactivity
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.item-card');
            cards.forEach(card => {
                card.addEventListener('click', function() {
                    this.style.transform = 'scale(1.02)';
                    setTimeout(() => {
                        this.style.transform = '';
                    }, 150);
                });
            });
        });
    </script>
</body>
</html>